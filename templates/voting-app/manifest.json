{
  "name": "voting-app",
  "displayName": "Governance Voting App",
  "description": "AI-powered governance voting agent with Telegram bot integration for Sei blockchain",
  "version": "1.0.0",
  "category": "governance",
  "packages": [
    "@sei-code/core",
    "@sei-code/governance", 
    "@sei-code/wallets",
    "@sei-code/precompiles",
    "@sei-code/social",
    "@sei-code/models",
    "@sei-code/analytics"
  ],
  "features": [
    "automated proposal monitoring",
    "AI-powered proposal analysis", 
    "telegram bot integration",
    "voting power tracking",
    "real-time notifications",
    "governance analytics"
  ],
  "integrations": [
    "telegram",
    "gemini",
    "claude", 
    "openai"
  ],
  "variables": {
    "projectName": {
      "type": "string",
      "description": "Name of your governance project",
      "default": "Sei Governance Bot",
      "required": true
    },
    "network": {
      "type": "enum",
      "description": "Sei network to connect to",
      "options": ["testnet", "mainnet"],
      "default": "testnet",
      "required": true
    },
    "walletType": {
      "type": "enum", 
      "description": "Wallet integration type",
      "options": ["metamask", "sei-global"],
      "default": "metamask",
      "required": true
    },
    "aiProvider": {
      "type": "enum",
      "description": "AI model provider for proposal analysis",
      "options": ["gemini", "claude", "openai"],
      "default": "gemini",
      "required": true
    },
    "telegramBot": {
      "type": "boolean",
      "description": "Enable Telegram bot integration",
      "default": true,
      "required": true
    },
    "autoVoting": {
      "type": "boolean",
      "description": "Enable automated voting based on AI recommendations",
      "default": false,
      "required": false
    },
    "notificationInterval": {
      "type": "number",
      "description": "Proposal monitoring interval in milliseconds",
      "default": 300000,
      "min": 60000,
      "max": 3600000,
      "required": false
    },
    "enableAnalytics": {
      "type": "boolean",
      "description": "Enable governance analytics and reporting",
      "default": true,
      "required": false
    }
  },
  "environmentVariables": [
    {
      "name": "PRIVATE_KEY",
      "description": "Your wallet private key",
      "required": true,
      "secret": true
    },
    {
      "name": "TELEGRAM_BOT_TOKEN", 
      "description": "Telegram bot token from @BotFather",
      "required": "{{ telegramBot }}",
      "secret": true
    },
    {
      "name": "TELEGRAM_CHAT_ID",
      "description": "Your Telegram chat ID for notifications", 
      "required": "{{ telegramBot }}",
      "secret": false
    },
    {
      "name": "GEMINI_API_KEY",
      "description": "Google Gemini API key",
      "required": "{{ aiProvider === 'gemini' }}",
      "secret": true
    },
    {
      "name": "CLAUDE_API_KEY",
      "description": "Anthropic Claude API key",
      "required": "{{ aiProvider === 'claude' }}",
      "secret": true
    },
    {
      "name": "OPENAI_API_KEY", 
      "description": "OpenAI API key",
      "required": "{{ aiProvider === 'openai' }}",
      "secret": true
    },
    {
      "name": "SEI_RPC_URL",
      "description": "Sei RPC endpoint URL",
      "required": false,
      "default": "{{ network === 'testnet' ? 'https://evm-rpc-testnet.sei-apis.com' : 'https://evm-rpc.sei-apis.com' }}"
    }
  ],
  "files": [
    {
      "path": "package.json",
      "template": "package.json.hbs",
      "description": "Project configuration and dependencies"
    },
    {
      "path": "tsconfig.json", 
      "template": "tsconfig.json.hbs",
      "description": "TypeScript configuration"
    },
    {
      "path": ".env.example",
      "template": ".env.example.hbs", 
      "description": "Environment variables template"
    },
    {
      "path": "src/index.ts",
      "template": "src/index.ts.hbs",
      "description": "Application entry point"
    },
    {
      "path": "src/agents/voting-agent.ts",
      "template": "src/agents/voting-agent.ts.hbs",
      "description": "Main voting agent implementation"
    },
    {
      "path": "src/services/notification-service.ts",
      "template": "src/services/notification-service.ts.hbs",
      "description": "Notification and alerting service"
    },
    {
      "path": "src/services/governance-service.ts",
      "template": "src/services/governance-service.ts.hbs",
      "description": "Governance data and analytics service"
    },
    {
      "path": "src/services/analytics-service.ts",
      "template": "src/services/analytics-service.ts.hbs",
      "description": "Voting analytics and insights"
    },
    {
      "path": "scripts/deploy.ts",
      "template": "scripts/deploy.ts.hbs",
      "description": "Deployment automation script"
    },
    {
      "path": "README.md",
      "template": "README.md.hbs",
      "description": "Project documentation"
    }
  ],
  "commands": {
    "install": "pnpm install",
    "build": "pnpm build", 
    "dev": "pnpm dev",
    "start": "pnpm start",
    "deploy": "pnpm run deploy"
  },
  "postInstall": [
    "echo '‚úÖ Voting app template installed successfully!'",
    "echo 'üìù Next steps:'",
    "echo '  1. Copy .env.example to .env and fill in your API keys'",
    "echo '  2. Run: pnpm dev to start development'",
    "echo '  3. Start your Telegram bot with /help command'",
    "echo '  4. Monitor governance proposals automatically'"
  ],
  "tags": [
    "governance",
    "voting", 
    "dao",
    "telegram",
    "ai",
    "analytics",
    "sei"
  ],
  "screenshots": [
    "assets/telegram-commands.png",
    "assets/proposal-analysis.png", 
    "assets/voting-dashboard.png"
  ],
  "documentation": {
    "quickStart": "docs/quickstart.md",
    "api": "docs/api.md",
    "deployment": "docs/deployment.md",
    "troubleshooting": "docs/troubleshooting.md"
  },
  "license": "MIT",
  "author": "Sei Agent Studio",
  "repository": "https://github.com/sei-agent-studio/templates",
  "keywords": [
    "sei",
    "governance", 
    "voting",
    "blockchain",
    "ai",
    "telegram",
    "dao"
  ]
}